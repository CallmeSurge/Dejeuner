"use strict";var ApplicationConfiguration=function(){var applicationModuleName="dejeuner",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("articles"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("fooditems"),ApplicationConfiguration.registerModule("menus"),ApplicationConfiguration.registerModule("orders"),ApplicationConfiguration.registerModule("users"),angular.module("articles").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Articles","articles","dropdown","/articles(/create)?"),Menus.addSubMenuItem("topbar","articles","List Articles","articles"),Menus.addSubMenuItem("topbar","articles","New Article","articles/create")}]),angular.module("articles").config(["$stateProvider",function($stateProvider){$stateProvider.state("listArticles",{url:"/articles",templateUrl:"modules/articles/views/list-articles.client.view.html"}).state("createArticle",{url:"/articles/create",templateUrl:"modules/articles/views/create-article.client.view.html"}).state("viewArticle",{url:"/articles/:articleId",templateUrl:"modules/articles/views/view-article.client.view.html"}).state("editArticle",{url:"/articles/:articleId/edit",templateUrl:"modules/articles/views/edit-article.client.view.html"})}]),angular.module("articles").controller("ArticlesController",["$scope","$stateParams","$location","Authentication","Articles",function($scope,$stateParams,$location,Authentication,Articles){$scope.authentication=Authentication,$scope.create=function(){var article=new Articles({title:this.title,content:this.content});article.$save(function(response){$location.path("articles/"+response._id),$scope.title="",$scope.content=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(article){if(article){article.$remove();for(var i in $scope.articles)$scope.articles[i]===article&&$scope.articles.splice(i,1)}else $scope.article.$remove(function(){$location.path("articles")})},$scope.update=function(){var article=$scope.article;article.$update(function(){$location.path("articles/"+article._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.articles=Articles.query()},$scope.findOne=function(){$scope.article=Articles.get({articleId:$stateParams.articleId})}}]),angular.module("articles").factory("Articles",["$resource",function($resource){return $resource("articles/:articleId",{articleId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Fooditems",function($scope,Authentication,Fooditems){$scope.authentication=Authentication,$scope.tab=1,$scope.selectTab=function(setTab){$scope.tab=setTab,$scope.fetchFooditems()},$scope.isSelected=function(){return $scope.tab},$scope.fetchFooditems=function(){$scope.fooditems=Fooditems.query()}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not existslol")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("fooditems").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Fooditems","fooditems","dropdown","/fooditems(/create)?"),Menus.addSubMenuItem("topbar","fooditems","List Fooditems","fooditems"),Menus.addSubMenuItem("topbar","fooditems","New Fooditem","fooditems/create")}]),angular.module("fooditems").config(["$stateProvider",function($stateProvider){$stateProvider.state("listFooditems",{url:"/fooditems",templateUrl:"modules/fooditems/views/list-fooditems.client.view.html"}).state("createFooditem",{url:"/fooditems/create",templateUrl:"modules/fooditems/views/create-fooditem.client.view.html"}).state("viewFooditem",{url:"/fooditems/:fooditemId",templateUrl:"modules/fooditems/views/view-fooditem.client.view.html"}).state("editFooditem",{url:"/fooditems/:fooditemId/edit",templateUrl:"modules/fooditems/views/edit-fooditem.client.view.html"})}]),angular.module("fooditems").controller("FooditemsController",["$scope","$stateParams","$location","Authentication","Fooditems",function($scope,$stateParams,$location,Authentication,Fooditems){$scope.authentication=Authentication,$scope.create=function(){var fooditem=new Fooditems({name:this.name,price:this.price});fooditem.$save(function(){$scope.show_item_success=!0,$scope.fooditems=Fooditems.query(),$scope.name="",$scope.price=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(fooditem){if(fooditem){fooditem.$remove();for(var i in $scope.fooditems)$scope.fooditems[i]===fooditem&&$scope.fooditems.splice(i,1)}else $scope.fooditem.$remove(function(){$location.path("/#!/")})},$scope.selectForUpdate=function(index){$scope.name=$scope.fooditems[index].name,$scope.price=$scope.fooditems[index].price,$scope.update_index=index},$scope.update=function(){$scope.fooditems[$scope.update_index].name=this.name,$scope.fooditems[$scope.update_index].price=this.price;var fooditem=$scope.fooditems[$scope.update_index];fooditem.$update(function(){$location.path("/#!/")},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.fooditems=Fooditems.query()},$scope.findOne=function(){$scope.fooditem=Fooditems.get({fooditemId:$stateParams.fooditemId})}}]),angular.module("fooditems").factory("Fooditems",["$resource",function($resource){return $resource("fooditems/:fooditemId",{fooditemId:"@_id"},{update:{method:"PUT"}})}]),angular.module("menus").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Menus","menus","dropdown","/menus(/create)?"),Menus.addSubMenuItem("topbar","menus","List Menus","menus"),Menus.addSubMenuItem("topbar","menus","New Menu","menus/create")}]),angular.module("menus").config(["$stateProvider",function($stateProvider){$stateProvider.state("listMenus",{url:"/menus",templateUrl:"modules/menus/views/list-menus.client.view.html"}).state("createMenu",{url:"/menus/create",templateUrl:"modules/menus/views/create-menu.client.view.html"}).state("viewMenu",{url:"/menus/:menuId",templateUrl:"modules/menus/views/view-menu.client.view.html"}).state("editMenu",{url:"/menus/:menuId/edit",templateUrl:"modules/menus/views/edit-menu.client.view.html"})}]),angular.module("menus").controller("MenusController",["$scope","$stateParams","$location","Authentication","MenuService","Fooditems",function($scope,$stateParams,$location,Authentication,MenuService,Fooditems){$scope.authentication=Authentication,$scope.items=[],$scope.create=function(){var ids=_.map($scope.items,function(obj){return obj._id}),menu=new MenuService({items:ids});menu.$save(function(){$scope.show_menu_success=!0,$scope.updateFoodItem(),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(menu){if(menu){menu.$remove();for(var i in $scope.menus)$scope.menus[i]===menu&&$scope.menus.splice(i,1)}else $scope.menu.$remove(function(){$location.path("/#!/")})},$scope.checkIndex=function($event,fooditem){if($event.target.checked)$scope.items.push(fooditem);else{var index=$scope.items.indexOf(fooditem);$scope.items.splice(index,1)}},$scope.isSelected=function($event,index){var itemIds=_.map($scope.menu.items,function(item){return item._id}),itemIsSelected=itemIds.indexOf($scope.fooditems[parseInt(index)]._id)>-1;return itemIsSelected},$scope.update=function(){var menu=$scope.menu;menu.$update(function(){$location.path("menus/"+menu._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.viewOrders=function(menuId){$location.path("menus/"+menuId+"/orders")},$scope.updateFoodItem=function(){$scope.fooditems=Fooditems.query()},$scope.find=function(){$scope.menus=MenuService.query()},$scope.getFoodItems=function(){$scope.fooditems=Fooditems.query()},$scope.findOne=function(){$scope.menu=MenuService.get({menuId:$stateParams.menuId})}}]),angular.module("menus").factory("MenuService",["$resource",function($resource){return $resource("menus/:menuId",{menuId:"@_id"},{update:{method:"PUT"}})}]),angular.module("orders").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Orders","orders","dropdown","/orders(/create)?"),Menus.addSubMenuItem("topbar","orders","List Orders","orders"),Menus.addSubMenuItem("topbar","orders","New Order","orders/create")}]),angular.module("orders").config(["$stateProvider",function($stateProvider){$stateProvider.state("listOrders",{url:"/menus/:menuId/orders",templateUrl:"modules/orders/views/list-orders.client.view.html"}).state("createOrder",{url:"/orders/create",templateUrl:"modules/orders/views/create-order.client.view.html"}).state("viewOrder",{url:"/orders/:orderId",templateUrl:"modules/orders/views/view-order.client.view.html"}).state("editOrder",{url:"/orders/:orderId/edit",templateUrl:"modules/orders/views/edit-order.client.view.html"})}]),angular.module("orders").controller("OrdersController",["$scope","$stateParams","$location","Authentication","Orders","AllOrders","MenuService",function($scope,$stateParams,$location,Authentication,Orders,AllOrders,MenuService){$scope.authentication=Authentication,$scope.myOrder=[],$scope.backendOrders=[],$scope.orderItems=[],$scope.total=0,$scope.create=function(){var order=new Orders({items:$scope.backendOrders});order.$save({menuId:$scope.menu._id},function(){$scope.show_order_success=!0},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(order){if(order){order.$remove();for(var i in $scope.orders)$scope.orders[i]===order&&$scope.orders.splice(i,1)}else $scope.order.$remove({menuId:$scope.menu._id},function(){$location.path("orders")})},$scope.checkedIndex=function($event,fooditem){if($event.target.checked)$scope.myOrder.push(fooditem),$scope.backendOrders.push({item:fooditem._id,quantity:fooditem.quantity}),$scope.total=$scope.total+fooditem.quantity*fooditem.price;else{var index=$scope.myOrder.indexOf(fooditem);$scope.myOrder.splice(index,1),$scope.backendOrders.splice(index,1),$scope.total=$scope.total-fooditem.quantity*fooditem.price}},$scope.update=function(){var order=$scope.order;order.$update({menuId:$scope.menu._id},function(){$location.path("orders/"+order._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.findCurrentMenu=function(){{var now=moment();MenuService.query(function(menus){for(var index=0;index<menus.length;index++){var date=moment(menus[index].date);if(now.isSame(date,"day")){$scope.menu=menus[index];break}}})}},$scope.find=function(){$scope.orders=AllOrders.query()},$scope.findOne=function(){$scope.order=AllOrders.get({orderId:$stateParams.orderId})},$scope.findByMenu=function(){$scope.orders=Orders.query({menuId:$stateParams.menuId})}}]),angular.module("orders").factory("Orders",["$resource",function($resource){return $resource("menus/:menuId/orders/:orderId",{orderId:"@_id",menuId:"@menuId"},{update:{method:"PUT"}})}]),angular.module("orders").factory("AllOrders",["$resource",function($resource){return $resource("orders/:orderId",{orderId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);